:imagesdir: images

= Atividades da Unidade I =
by Pablio Martins

== Atividade 01 ==
=== *Etapa 01* ===
Esta primeira atividade deverá solicitar do usuário dois pontos, localizados dentro dos limites do tamanho de uma imagem, e exibir o negativo da imagem no interior do retangulo formado por esses dois pontos.

O código esctrito na linguagem C++ é exposto a seguir:

.Show Code
[%collapsible]
====
[source, cpp]
.regions.cpp
----
include::codes/regions.cpp[]
----
====

Os resultados são:

[.float-group]
--
[.left]
[[fig_biel_regions, Biel]]
.Imagem Original
image::biel.png[A, 240]

[.left]
[[fig_regions, Biel-Negativo]]
.Imagem Com Negativo
image::regions.png[B, 240]
--

====
Comentários:

A linha a seguir é responsável pela leitura da imagem em tons de cinza, evidenciado pelo parametro *IMREAD_GRAYSCALE*.
[source, cpp]
----
image = cv::imread("./img/biel.png", cv::IMREAD_GRAYSCALE);
----

Seguindo no código temos a declaração de:
[source, cpp]
----
cv::Vec2i first_point;
cv::Vec2i second_point;
----
Que são vetores com duas posições do tipo inteiro que armazenarão os pontos fornecidos pelo usuário.

Uma estrutura semelhate a:
[source, cpp]
----
do{
        std::cout << "Digite a coordenada 'x' do primero ponto (0 a " <<  image.rows << ")" << std::endl;
        std::cin >> first_point[0];
        if(first_point[0] < 0 || first_point[0] >= image.rows)
            std::cout << "O valor deve ser entre 0 e " << image.rows << std::endl;
} while (first_point[0] < 0 || first_point[0] >= image.rows);
----
é feita para cada coordenada dos pontos fornecidos pelo usuário, afim de garantir que o ponto estará dentro dos limites da imagem.

A estrutura de código seguinte é responsável por garantir que a posição da coordenadas *x* do *ponto 1* seja menor que a posição da coordenada *x* do *ponto 2*, o mesmo artifício é aplicado na coodenanda *y*.
[source, cpp]
----
if(first_point[0] < second_point[0]){
    x_smaller = first_point[0];
    x_bigger = second_point[0];
} 
else {
    x_smaller = second_point[0];
    x_bigger = first_point[0];
}
----

Nesta próxima etapa do codigo é feita uma varredura por toda a imagem trocando-se os pixel atual por seu valor inverso. O valor inverso é dado pela subtração do valor máximo de representação da cor (255) com o valor atual do pixel.
[source, cpp]
----
for( int i = x_smaller; i < x_bigger; i++){
    for(int j = y_smaller; j < y_bigger; j++){
        image.at<uchar>(i,j) = 255 - image.at<uchar>(i,j);
    }
}
----
====

=== Etapa 02 ===

Nesta Segunda etapa da *atividade 01* o programa deverá trocar os quadrantes da diagonal na imagem.

Nesse sentido, o código implementado pode ser vista abaixo:

.Show Code
[%collapsible]
====
[source, cpp]
.replaceregions.cpp
----
include::codes/replaceregions.cpp[]
----
====

Os resultados são:

[.float-group]
--
[.left]
[[fig_biel_regions, Biel]]
.Imagem Original
image::biel.png[A, 240]

[.left]
[[fig_regions, Biel ]]
.Imagem diagonais trocadas
image::repleaceregions.png[B, 240]
--

====
Comentário:

O trecho de código abaixo inicializa uma matriz com as proporções da imagem original, em que todas as posições da matriz são preenchidas com zero. Nota-se também que a matriz criada é *unsigned char de 8 bits* e com apenas um canal, conforme mostra o parametro *CV_8UC1*.
[source, cpp]
----
image_result = cv::Mat::zeros(image_height, image_width, CV_8UC1);
----

O próximo bloco de código realiza a troca dos quadrantes da imagem. Com o centro posicionado no meio da figura o método *Rect* copia quadros para a variável *image_result* posisionando-os nos quadrantes de forma a produzir a inversão.
[source, cpp]
----
image(cv::Rect(0,0,image_width/2,image_height/2))
    .copyTo(image_result(cv::Rect(image_width/2, image_height/2,image_width/2, image_height/2)));
image(cv::Rect(image_width/2, image_height/2,image_width/2, image_height/2))
    .copyTo(image_result(cv::Rect(0, 0,image_width/2, image_height/2)));
image(cv::Rect(image_width/2, 0,image_width/2, image_height/2))
    .copyTo(image_result(cv::Rect(0, image_width/2,image_width/2, image_height/2)));
image(cv::Rect(0, image_height/2,image_width/2, image_height/2))
    .copyTo(image_result(cv::Rect(image_width/2, 0,image_width/2, image_height/2)));
----
====

== Atividade 02 ==

A segunda atividade consiste em criar uma imagem com dimensões 256x256 pixels contendo uma senóide de 4 períodos e com amplitude de 127 desenhada na horizonal. A imagem gerada deve ser salva em PNG e em YML. Um gráfico deve ser gerado mostrando a diferença entre uma imagem e a outra ao percorrer uma linha da matriz de cada imagem.

.Show Code
[%collapsible]
====
[source, cpp]
.filestorage.cpp
----
include::codes/filestorage.cpp[]
----
====

O resultado é:

[.float-group]
--
[.left]
[[fig_biel_regions, Biel]]
.Imagem gerada (PNG)
image::senoide-256.png[A, 240]
--

====
Comentários:

====

== Atividade 03 ==
Esta Atividade propõe a recuperação de uma imagem codificada de uma imagem resultante. Os bits menos significantes de uma imagem são subistituídos por bits mais significantes de outra imagem, fazendo assim com que uma imagem fique oculta em outra.

.Show Code
[%collapsible]
====
[source, cpp]
.esteg-encode.cpp
----
include::codes/esteg-encode.cpp[]
----
====

O resultado é:

[.float-group]
--
[.left]
.Imagem Codificada
image::desafio-esteganografia.png[A, 240]

[.left]
.Imagem Descodificada
image::esteganografia.png[B, 240]
--

====
Comentário:

O trecho exposto logo abaixo faz a inicialização de uma matriz de três canais com valores zerados nas dimensões da imagem original. Essa matriz irá armazenar os bits menos significativos da imagem original, e revelar qual a imagem está escondida.
[source, cpp]
----
imagemEscondida = cv::Mat::zeros(imagemCodificada.rows, imagemCodificada.cols, CV_8UC3);
----

No trecho seguinte é feito uma varredura por toda a matriz da imagem original, é coletando apenas os *3 bits* menos significativos e efetuando um deslocamento de *5 bits a direita* para posicioná-los nas posições significativas da representação binária. Assim, é possível exibir a imagem escondida. 
[source, cpp]
----
for (int i = 0; i < imagemCodificada.rows; i++) {
    for (int j = 0; j < imagemCodificada.cols; j++) {
        valCodificada = imagemCodificada.at<cv::Vec3b>(i, j);
        valEscondida[0] = (0b00000111 & valCodificada[0]) << 5;
        valEscondida[1] = (0b00000111 & valCodificada[1]) << 5;
        valEscondida[2] = (0b00000111 & valCodificada[2]) << 5;
        imagemEscondida.at<cv::Vec3b>(i, j) = valEscondida;
    }
}
----
====

== Atividade 04 ==

=== Etapa 01 ===

Nesta Atividade propõe-se que seja discutido a rotulação com tons de objetos em uma cena. Nos casos em que a rotulação ocorre em imagens com menos de 255 objetos em uma cena, a escala de cinza se mostra uma forte aliada, mas e para imagens que extrapolam esse valor? +
Para resolver esse problema poderiamos adicionar componentes de cor, por exemplo o sistema RGB, assim haveria *255x255x255* possibilidades de marcação dos objetos em cena.

=== Etapa 02 ===

A segunda etapa consiste em codificar um identificador de regiões com ou sem buracos internos que existam em uma cena. abaixo está a cena em estudo.

[.float-group]
--
[.left]
.Bolhas
image::bolhas.png[A, 240]
--

As regiões que tocam as bordas devem ser desconsideradas.

.Show Code
[%collapsible]
====
[source, cpp]
.labeling.cpp
----
include::codes/labeling.cpp[]
----
====

====
Comentários:

Para realizar a remoção dos objetos que tocam as bordas, foi executado uma varredura nas bordas da figura a procura de pixels brancos. O trecho abaixo mostra as instruções realizadas.

[source, cpp]
----
for(int i = 0; i < height; i++){        
    if(image.at<uchar>(i,0) == 255){
        pointWhite.x = 0;
        pointWhite.y = i;
        cv::floodFill(image, pointWhite, 0);
    }
    if(image.at<uchar>(i, height-1) == 255){
        pointWhite.x = height-1;
        pointWhite.y = i;
        cv::floodFill(image, pointWhite, 0);
    }
}

for(int i = 0; i < width; i++){
    if(image.at<uchar>(0,i) == 255){
        pointWhite.x = i;
        pointWhite.y = 0;
        cv::floodFill(image, pointWhite, 0);
    }
    if(image.at<uchar>(width-1, i) == 255){
        pointWhite.x = i;
        pointWhite.y = width-1;
        cv::floodFill(image, pointWhite, 0);
    }
}
----

Como resultado temos:

[.float-group]
--
[.left]
.Bolhas sem elementos nas bordas
image::labeling_borda.png[A, 240]
--

Em seguida faz-se a contagem de elementos dentro da cena, usando diferentes tons de cinza para marcar os elementos ja computados. O trecho abaixo mostra as instruções executadas para essa tarefa.

[source, cpp]
----
numberObjects = 0;
for(int i = 0; i < height; i++){
    for(int j = 0; j < width; j++){
        if(image.at<uchar>(i, j) == 255){
            numberObjects++;
            pointWhite.x = j;
            pointWhite.y = i;
            cv::floodFill(image, pointWhite, numberObjects);
        }
    }
}
----

Como resultado temos:

[.float-group]
--
[.left]
.Bolhas com rotulação
image::labeling.png[A, 240]
--

O próximo passo é tornar todo o fundo branco. 

[source, cpp]
----
cv::floodFill(image, cv::Point(0,0), 255);
----

O resultado apresentado é:

[.float-group]
--
[.left]
.Bolhas com rotulação
image::labeling_fundo.png[A, 240]
--

Agora vamos identificar, contar e remover as bolhas que tenham 1 ou mais buracos. O trecho seguinte é responsável por essa tarefa.

[source, cpp]
----
donut = 0;
for(int i = 0; i < height; i++){
    for(int j = 1; j < width; j++){
        if(image.at<uchar>(i, j) == 0){
            if(image.at<uchar>(i,j-1) != 255){
                donut++;
                cv::floodFill(image, cv::Point(j,i), 255);
                cv::floodFill(image, cv::Point(j-1,i), 255);
            }
            else{
                cv::floodFill(image, cv::Point(j,i), 255);
            }           
        }
    }
}
----

Feito o passo anterior restam apenas as regiões que não contêm buracos.

[.float-group]
--
[.left]
.Bolhas sem regiões com buraco
image::labeling_no_donut.png[A, 240]
--

Por fim é feito a contagem das bolhas sem buraco. Segue o trecho do código.

[source, cpp]
----
bubbles = 0;
for(int i = 0; i < height; i++){
    for(int j = 0; j < width; j++){
        if(image.at<uchar>(i, j) != 255){
            bubbles++;
            cv::floodFill(image, cv::Point(j,i), 255);      
        }
    }
}
----
Como saída final do código, para a figura *bolhas.png*, temos: +
Total de Objetos: 21 +
Total de Rosquinha: 7 +
Total de Bolhas: 14 +
====

== Atividade 05 ==

Esta atividade busca realizar a equalização do histograma durante a captura de uma câmera.

.Show Code
[%collapsible]
====
[source, cpp]
.labeling.cpp
----
include::codes/equalize.cpp[]
----
====
.Video Normal/Equalizador
video::TYsMKFstamg[youtube]

====
Comentários:

====