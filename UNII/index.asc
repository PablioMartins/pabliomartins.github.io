:imagesdir: images
:last-update-label!:
:stem:

= Atividades da Unidade II =
by Pablio Martins

== Atividade 01 ==

== Atividade 02 ==

*Enunciado:* +
Utilizando o programa *dftfilter.cpp* como referência, implemente o filtro homomórfico para melhorar imagens com iluminação irregular. Crie uma cena mal iluminada e ajuste os parâmetros do filtro homomórfico para corrigir a iluminação da melhor forma possível. Assuma que a imagem fornecida é em tons de cinza.

A filtragem homomórfica baseia-se em princípios de iluminância e reflectância para realizar a filtragem. Dado os pixels de uma imagem podem ser expressos em:

[stem]
++++
f(x,y) = i(x,y)r(x,y)
++++

Em que temos a componente de iluminação (*i*) e reflectância (*r*).

Considerando todas os tratamentos necessários, podemos construir o filtro com base na seguinte equação:

[stem]
++++
H(u,v) = (\gamma H - \gamma L) \left( 1 - \e^{-C \left( \frac{D^{2}(u,v)}{D_{0}^{2}} \right)} + \right) + \gamma L
++++

Esse filtro deve atenuar as frequências mais baixas e manter as frequências mais altas.

Abaixo segue o código implementado:

.Show Code
[%collapsible]
====
[source, cpp]
.dftfilter.cpp
----
include::codes/dftfilter.cpp[]
----
====

Resultados:
[.float-group]
--
[.left]
.Imagem em tons de cinza
image::homo_gray.png[A, 350]

[.left]
.Filtro com parametros gammaL: 2.5, gammaH: 0.6, C: 0.3, D0: 12
image::HomomorphicFilter.png[B, 350]

[.left]
.Imagem com a aplicação do filtro
image::dftImagefilter.png[C, 350]
--

====
Comentários:

A função homomorphicFilter é responsável pela geração da matriz 2d do filtro.
[source, cpp]
----
void homomorphicFilter(cv::Mat &image, cv::Mat &filter){
  cv::Mat filter2D = cv::Mat(image.rows, image.cols, CV_32F);
  int centerX = image.rows / 2;
  int centerY = image.cols / 2;

  for(int i=0; i<image.rows; i++){
    for(int j=0; j<image.cols; j++){
      filter2D.at<float> (i, j) = (gammaH - gammaL)*(
          1 - exp(-C*(( pow(i - centerX, 2) + pow(j - centerY, 2)) / pow(D0, 2)))
        ) + gammaL;
    }
  }
  cv::Mat planes[] = {filter2D, cv::Mat::zeros(filter2D.size(), CV_32F)};
  cv::merge(planes, 2, filter);

  cv::normalize(filter2D, filter2D, 0, 255, cv::NORM_MINMAX);
  filter2D.convertTo(filter2D, CV_8U);
  cv::imwrite("./img/HomomorphicFilter.png", filter2D);
}
----

O laço *for* percorre toda a matriz da imagem ponderando as posições com valores entre 0 e 1. O cálculo é feito usando a equação descrita em momento anterior.
====

== Atividade 03 == 

Nesta atividade devemos projetar um código que use as bordas produzidas pelo algoritmo de Canny e a técnica pontilhista para gerar uma imagem.

segue o código desenvolvido:

.Show Code
[%collapsible]
====
[source, cpp]
.cannypoints.cpp
----
include::codes/cannypoints.cpp[]
----
====

====
Comentários:

A imagem escolhida para desenvolvimento desta atividade foi:
[.float-group]
--
[.left]
image::paisagem.jpg[A, 350]
--

Inicialmente definimos alguns parametros que usaremos para gerar o pontilhismo na imagem.
[source, cpp]
----
#define STEP 5
#define JITTER 3
#define RATIO 3
----

Seguindo no código, o trecho abaixo gera a imagem das bordas com algoritimo de Canny. *border* recebe a imagem das bordas, o *lowThreshold* escolhido foi 50 e o *ratio*, 3. 
[source, cpp]
----
cv::Canny(image, border, lowThreshold, lowThreshold * ratio);
----

[.float-group]
--
[.left]
.Imagem gerada pelo algoritmo de Canny
image::border_canny.png[A, 350]
--


Nesse trecho, são redimencionados aos vetores *xrange* e *yrange* com base no tamanho da imagem e o passo que será usado para gerar o pontilhismo.
[source, cpp]
----
xrange.resize(height / STEP);
yrange.resize(width / STEP);
----

A função iota gera uma sequêncica de valores, nesse caso de 0 até preencher todos os elementos de vetor *xrange* e *yrange*, incrementando 1 de uma posição para a outra.
[source, cpp]
----
std::iota(xrange.begin(), xrange.end(), 0);
std::iota(yrange.begin(), yrange.end(), 0);
----

No código abaixo, é feito o ajuste dos valores de *xrange* e *yrange*, para que eles correspondam a uma posição espaçada e represente posições de toda a imagem, como um grid.
[source, cpp]
----
for(uint i = 0; i < xrange.size(); i++){
  xrange[i] = xrange[i] * STEP + STEP / 2;
}
for(uint i = 0; i < yrange.size(); i++){
  yrange[i] = yrange[i] * STEP + STEP / 2;
}
----

Seguindo com o código, vamos calcular e preecher as bolinhas do pontilhismo, de forma aleatória, mas baseado nos pontos calculados em *xrange* e *yrange*.
[source, cpp]
----
std::random_shuffle(xrange.begin(), xrange.end());
for(auto i : xrange){
  std::random_shuffle(yrange.begin(), yrange.end());
  for (auto j: yrange){
    x = i + std::rand() % (2 * JITTER - JITTER + 1);
    y = j + std::rand() % (2 * JITTER - JITTER + 1);
          
    gray = image.at<uchar>(x,y);
    if(border.at<uchar>(x,y) == 255){
      cv::circle(points, cv::Point(y,x), RATIO, CV_RGB(0, 0, 0),
                 cv::FILLED, cv::LINE_AA);
    }
    else {
      cv::circle(points, cv::Point(y,x), RATIO, CV_RGB(gray, gray, gray),
                 cv::FILLED, cv::LINE_AA);
    }
  }
}
----
A imagem gerada pelo algoritmo de Canny é usada durante o preenchimento para adicionar os pontos pretos nos locais de borda, esse papel é feito pelo *if*.

Como resultado, temos:
[.float-group]
--
[.left]
.Pontilhismo + Bordas de Canny
image::cannypoint.png[A, 350]

[.left]
.Pontilhismo
image::point.png[B, 350]
--
====

== Atividade 04 ==

== Atividade 05 ==

Projetar um código que deixe os números expressos em segmentos de forma continua, usando técnicas de morfologia.

segue as imagens exemplos:
[.float-group]
--
[.left]
image::digitos-1.png[A, 250]

[.left]
image::digitos-2.png[B, 250]

[.left]
image::digitos-3.png[C, 250]

[.left]
image::digitos-4.png[D, 250]

[.left]
image::digitos-5.png[E, 250]
--

segue o código implementado:

.Show Code
[%collapsible]
====
[source, cpp]
.dftfilter.cpp
----
include::codes/morfologia.cpp[]
----
====

Resultados:
[.float-group]
--
[.left]
image::digitos_1_morf.png[A, 250]

[.left]
image::digitos_2_morf.png[B, 250]

[.left]
image::digitos_3_morf.png[C, 250]

[.left]
image::digitos_4_morf.png[D, 250]

[.left]
image::digitos_5_morf.png[E, 250]
--

====
Comentários:

O trecho seguinte refere-se a criação dos elementos estruturantes.
[source, cpp]
----
str_v = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(1,15));
str_h = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(3,1));
----
Esses elementos serão responsáveis pela união dos segumentos dos números, logo serão usados dois tipos: um vertical com 1x15 e um horizontal 3x1. Os elementos foram pensados para conseguir preencher a lacuna entre dois segmentos.

No trecho seguinte temos as operações executadas nas imagens. 
[source, cpp]
----
cv::erode(image_in, image_out, str_v);
cv::erode(image_out, image_out, str_h);
cv::dilate(image_out, image_out, str_v);
----
Como os segmentos estão na cor preta, é feito uma erosão com os elementos estruturantes criados para unir os segmentos pretos, seguido de uma dilatação apenas com o elemento estruturante 1x15, com o intuito de afinar as linhas dos números na vertical.
====